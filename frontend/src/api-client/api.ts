/* tslint:disable */
/* eslint-disable */
/**
 * Star Wars API
 * The Star Wars API documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Film
 */
export interface Film {
    /**
     * The title of the film
     * @type {string}
     * @memberof Film
     */
    'title': string;
    /**
     * The episode number of the film
     * @type {number}
     * @memberof Film
     */
    'episode_id': number;
    /**
     * The opening crawl text of the film
     * @type {string}
     * @memberof Film
     */
    'opening_crawl': string;
    /**
     * The director of the film
     * @type {string}
     * @memberof Film
     */
    'director': string;
    /**
     * The producer(s) of the film
     * @type {string}
     * @memberof Film
     */
    'producer': string;
    /**
     * The release date of the film
     * @type {string}
     * @memberof Film
     */
    'release_date': string;
    /**
     * URLs of characters that appear in the film
     * @type {Array<string>}
     * @memberof Film
     */
    'characters': Array<string>;
    /**
     * URLs of planets that appear in the film
     * @type {Array<string>}
     * @memberof Film
     */
    'planets': Array<string>;
    /**
     * URLs of starships that appear in the film
     * @type {Array<string>}
     * @memberof Film
     */
    'starships': Array<string>;
    /**
     * URLs of vehicles that appear in the film
     * @type {Array<string>}
     * @memberof Film
     */
    'vehicles': Array<string>;
    /**
     * URLs of species that appear in the film
     * @type {Array<string>}
     * @memberof Film
     */
    'species': Array<string>;
    /**
     * The ISO 8601 date format of when this resource was created
     * @type {string}
     * @memberof Film
     */
    'created': string;
    /**
     * The ISO 8601 date format of when this resource was edited
     * @type {string}
     * @memberof Film
     */
    'edited': string;
    /**
     * The URL of this resource
     * @type {string}
     * @memberof Film
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface Person
 */
export interface Person {
    /**
     * The name of this person
     * @type {string}
     * @memberof Person
     */
    'name': string;
    /**
     * The height of this person in centimeters
     * @type {string}
     * @memberof Person
     */
    'height': string;
    /**
     * The mass of this person in kilograms
     * @type {string}
     * @memberof Person
     */
    'mass': string;
    /**
     * The hair color of this person
     * @type {string}
     * @memberof Person
     */
    'hair_color': string;
    /**
     * The skin color of this person
     * @type {string}
     * @memberof Person
     */
    'skin_color': string;
    /**
     * The eye color of this person
     * @type {string}
     * @memberof Person
     */
    'eye_color': string;
    /**
     * The birth year of this person
     * @type {string}
     * @memberof Person
     */
    'birth_year': string;
    /**
     * The gender of this person
     * @type {string}
     * @memberof Person
     */
    'gender': string;
    /**
     * The URL of the homeworld of this person
     * @type {string}
     * @memberof Person
     */
    'homeworld': string;
    /**
     * URLs of films this person has been in
     * @type {Array<string>}
     * @memberof Person
     */
    'films': Array<string>;
    /**
     * URLs of species this person belongs to
     * @type {Array<string>}
     * @memberof Person
     */
    'species': Array<string>;
    /**
     * URLs of vehicles this person has piloted
     * @type {Array<string>}
     * @memberof Person
     */
    'vehicles': Array<string>;
    /**
     * URLs of starships this person has piloted
     * @type {Array<string>}
     * @memberof Person
     */
    'starships': Array<string>;
    /**
     * The ISO 8601 date format of when this resource was created
     * @type {string}
     * @memberof Person
     */
    'created': string;
    /**
     * The ISO 8601 date format of when this resource was edited
     * @type {string}
     * @memberof Person
     */
    'edited': string;
    /**
     * The URL of this resource
     * @type {string}
     * @memberof Person
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface Planet
 */
export interface Planet {
    /**
     * The name of this planet
     * @type {string}
     * @memberof Planet
     */
    'name': string;
    /**
     * The number of standard hours it takes for this planet to complete a single rotation on its axis
     * @type {string}
     * @memberof Planet
     */
    'rotation_period': string;
    /**
     * The number of standard days it takes for this planet to complete a single orbit of its local star
     * @type {string}
     * @memberof Planet
     */
    'orbital_period': string;
    /**
     * The diameter of this planet in kilometers
     * @type {string}
     * @memberof Planet
     */
    'diameter': string;
    /**
     * The climate of this planet
     * @type {string}
     * @memberof Planet
     */
    'climate': string;
    /**
     * A number denoting the gravity of this planet
     * @type {string}
     * @memberof Planet
     */
    'gravity': string;
    /**
     * The terrain of this planet
     * @type {string}
     * @memberof Planet
     */
    'terrain': string;
    /**
     * The percentage of the planet surface that is naturally occurring water
     * @type {string}
     * @memberof Planet
     */
    'surface_water': string;
    /**
     * The average population of sentient beings inhabiting this planet
     * @type {string}
     * @memberof Planet
     */
    'population': string;
    /**
     * URLs of people who have been residents on this planet
     * @type {Array<string>}
     * @memberof Planet
     */
    'residents': Array<string>;
    /**
     * URLs of films that this planet has appeared in
     * @type {Array<string>}
     * @memberof Planet
     */
    'films': Array<string>;
    /**
     * The ISO 8601 date format of when this resource was created
     * @type {string}
     * @memberof Planet
     */
    'created': string;
    /**
     * The ISO 8601 date format of when this resource was edited
     * @type {string}
     * @memberof Planet
     */
    'edited': string;
    /**
     * The URL of this resource
     * @type {string}
     * @memberof Planet
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface Species
 */
export interface Species {
    /**
     * The name of this species
     * @type {string}
     * @memberof Species
     */
    'name': string;
    /**
     * The classification of this species
     * @type {string}
     * @memberof Species
     */
    'classification': string;
    /**
     * The designation of this species
     * @type {string}
     * @memberof Species
     */
    'designation': string;
    /**
     * The average height of this species in centimeters
     * @type {string}
     * @memberof Species
     */
    'average_height': string;
    /**
     * The skin colors that occur naturally for this species
     * @type {string}
     * @memberof Species
     */
    'skin_colors': string;
    /**
     * The hair colors that occur naturally for this species
     * @type {string}
     * @memberof Species
     */
    'hair_colors': string;
    /**
     * The eye colors that occur naturally for this species
     * @type {string}
     * @memberof Species
     */
    'eye_colors': string;
    /**
     * The average lifespan of this species in years
     * @type {string}
     * @memberof Species
     */
    'average_lifespan': string;
    /**
     * The URL of the planet that this species originates from
     * @type {string}
     * @memberof Species
     */
    'homeworld': string;
    /**
     * The language commonly spoken by this species
     * @type {string}
     * @memberof Species
     */
    'language': string;
    /**
     * URLs of people that are a part of this species
     * @type {Array<string>}
     * @memberof Species
     */
    'people': Array<string>;
    /**
     * URLs of films that this species has appeared in
     * @type {Array<string>}
     * @memberof Species
     */
    'films': Array<string>;
    /**
     * The ISO 8601 date format of when this resource was created
     * @type {string}
     * @memberof Species
     */
    'created': string;
    /**
     * The ISO 8601 date format of when this resource was edited
     * @type {string}
     * @memberof Species
     */
    'edited': string;
    /**
     * The URL of this resource
     * @type {string}
     * @memberof Species
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface Starship
 */
export interface Starship {
    /**
     * The name of this starship
     * @type {string}
     * @memberof Starship
     */
    'name': string;
    /**
     * The model or official name of this starship
     * @type {string}
     * @memberof Starship
     */
    'model': string;
    /**
     * The class of this starship
     * @type {string}
     * @memberof Starship
     */
    'starship_class': string;
    /**
     * The manufacturer of this starship
     * @type {string}
     * @memberof Starship
     */
    'manufacturer': string;
    /**
     * The cost of this starship new, in galactic credits
     * @type {string}
     * @memberof Starship
     */
    'cost_in_credits': string;
    /**
     * The length of this starship in meters
     * @type {string}
     * @memberof Starship
     */
    'length': string;
    /**
     * The number of personnel needed to run or pilot this starship
     * @type {string}
     * @memberof Starship
     */
    'crew': string;
    /**
     * The number of non-essential people this starship can transport
     * @type {string}
     * @memberof Starship
     */
    'passengers': string;
    /**
     * The maximum speed of this starship in atmosphere
     * @type {string}
     * @memberof Starship
     */
    'max_atmosphering_speed': string;
    /**
     * The class of this starships hyperdrive
     * @type {string}
     * @memberof Starship
     */
    'hyperdrive_rating': string;
    /**
     * The maximum number of kilograms that this starship can transport
     * @type {string}
     * @memberof Starship
     */
    'cargo_capacity': string;
    /**
     * The maximum length of time that this starship can provide consumables for its entire crew without having to resupply
     * @type {string}
     * @memberof Starship
     */
    'consumables': string;
    /**
     * The Maximum number of Megalights this starship can travel in a standard hour
     * @type {string}
     * @memberof Starship
     */
    'MGLT': string;
    /**
     * URLs of films that this starship has appeared in
     * @type {Array<string>}
     * @memberof Starship
     */
    'films': Array<string>;
    /**
     * URLs of people who have piloted this starship
     * @type {Array<string>}
     * @memberof Starship
     */
    'pilots': Array<string>;
    /**
     * The ISO 8601 date format of when this resource was created
     * @type {string}
     * @memberof Starship
     */
    'created': string;
    /**
     * The ISO 8601 date format of when this resource was edited
     * @type {string}
     * @memberof Starship
     */
    'edited': string;
    /**
     * The URL of this resource
     * @type {string}
     * @memberof Starship
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface Vehicle
 */
export interface Vehicle {
    /**
     * The name of this vehicle
     * @type {string}
     * @memberof Vehicle
     */
    'name': string;
    /**
     * The model or official name of this vehicle
     * @type {string}
     * @memberof Vehicle
     */
    'model': string;
    /**
     * The class of this vehicle
     * @type {string}
     * @memberof Vehicle
     */
    'vehicle_class': string;
    /**
     * The manufacturer of this vehicle
     * @type {string}
     * @memberof Vehicle
     */
    'manufacturer': string;
    /**
     * The cost of this vehicle new, in galactic credits
     * @type {string}
     * @memberof Vehicle
     */
    'cost_in_credits': string;
    /**
     * The length of this vehicle in meters
     * @type {string}
     * @memberof Vehicle
     */
    'length': string;
    /**
     * The number of personnel needed to run or pilot this vehicle
     * @type {string}
     * @memberof Vehicle
     */
    'crew': string;
    /**
     * The number of non-essential people this vehicle can transport
     * @type {string}
     * @memberof Vehicle
     */
    'passengers': string;
    /**
     * The maximum speed of this vehicle in atmosphere
     * @type {string}
     * @memberof Vehicle
     */
    'max_atmosphering_speed': string;
    /**
     * The maximum number of kilograms that this vehicle can transport
     * @type {string}
     * @memberof Vehicle
     */
    'cargo_capacity': string;
    /**
     * The maximum length of time that this vehicle can provide consumables for its entire crew without having to resupply
     * @type {string}
     * @memberof Vehicle
     */
    'consumables': string;
    /**
     * URLs of films that this vehicle has appeared in
     * @type {Array<string>}
     * @memberof Vehicle
     */
    'films': Array<string>;
    /**
     * URLs of people who have piloted this vehicle
     * @type {Array<string>}
     * @memberof Vehicle
     */
    'pilots': Array<string>;
    /**
     * The ISO 8601 date format of when this resource was created
     * @type {string}
     * @memberof Vehicle
     */
    'created': string;
    /**
     * The ISO 8601 date format of when this resource was edited
     * @type {string}
     * @memberof Vehicle
     */
    'edited': string;
    /**
     * The URL of this resource
     * @type {string}
     * @memberof Vehicle
     */
    'url': string;
}

/**
 * AppApi - axios parameter creator
 * @export
 */
export const AppApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppApi - functional programming interface
 * @export
 */
export const AppApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetHello(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetHello(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AppApi.appControllerGetHello']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AppApi - factory interface
 * @export
 */
export const AppApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.appControllerGetHello(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AppApi - object-oriented interface
 * @export
 * @class AppApi
 * @extends {BaseAPI}
 */
export class AppApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public appControllerGetHello(options?: RawAxiosRequestConfig) {
        return AppApiFp(this.configuration).appControllerGetHello(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FilmsApi - axios parameter creator
 * @export
 */
export const FilmsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a list of all Star Wars films
         * @summary Get all films
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filmsControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/films`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a specific Star Wars film by its ID
         * @summary Get a film by ID
         * @param {number} id The ID of the film
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filmsControllerFindOne: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('filmsControllerFindOne', 'id', id)
            const localVarPath = `/films/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilmsApi - functional programming interface
 * @export
 */
export const FilmsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilmsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a list of all Star Wars films
         * @summary Get all films
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filmsControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Film>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filmsControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FilmsApi.filmsControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a specific Star Wars film by its ID
         * @summary Get a film by ID
         * @param {number} id The ID of the film
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filmsControllerFindOne(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Film>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filmsControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FilmsApi.filmsControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FilmsApi - factory interface
 * @export
 */
export const FilmsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilmsApiFp(configuration)
    return {
        /**
         * Retrieve a list of all Star Wars films
         * @summary Get all films
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filmsControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<Film>> {
            return localVarFp.filmsControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a specific Star Wars film by its ID
         * @summary Get a film by ID
         * @param {number} id The ID of the film
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filmsControllerFindOne(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Film> {
            return localVarFp.filmsControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FilmsApi - object-oriented interface
 * @export
 * @class FilmsApi
 * @extends {BaseAPI}
 */
export class FilmsApi extends BaseAPI {
    /**
     * Retrieve a list of all Star Wars films
     * @summary Get all films
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilmsApi
     */
    public filmsControllerFindAll(options?: RawAxiosRequestConfig) {
        return FilmsApiFp(this.configuration).filmsControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a specific Star Wars film by its ID
     * @summary Get a film by ID
     * @param {number} id The ID of the film
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilmsApi
     */
    public filmsControllerFindOne(id: number, options?: RawAxiosRequestConfig) {
        return FilmsApiFp(this.configuration).filmsControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PeopleApi - axios parameter creator
 * @export
 */
export const PeopleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a list of all Star Wars characters
         * @summary Get all people
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        peopleControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/people`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a specific Star Wars character by their ID
         * @summary Get a person by ID
         * @param {number} id The ID of the person
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        peopleControllerFindOne: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('peopleControllerFindOne', 'id', id)
            const localVarPath = `/people/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PeopleApi - functional programming interface
 * @export
 */
export const PeopleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PeopleApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a list of all Star Wars characters
         * @summary Get all people
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async peopleControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Person>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.peopleControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PeopleApi.peopleControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a specific Star Wars character by their ID
         * @summary Get a person by ID
         * @param {number} id The ID of the person
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async peopleControllerFindOne(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Person>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.peopleControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PeopleApi.peopleControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PeopleApi - factory interface
 * @export
 */
export const PeopleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PeopleApiFp(configuration)
    return {
        /**
         * Retrieve a list of all Star Wars characters
         * @summary Get all people
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        peopleControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<Person>> {
            return localVarFp.peopleControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a specific Star Wars character by their ID
         * @summary Get a person by ID
         * @param {number} id The ID of the person
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        peopleControllerFindOne(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Person> {
            return localVarFp.peopleControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PeopleApi - object-oriented interface
 * @export
 * @class PeopleApi
 * @extends {BaseAPI}
 */
export class PeopleApi extends BaseAPI {
    /**
     * Retrieve a list of all Star Wars characters
     * @summary Get all people
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApi
     */
    public peopleControllerFindAll(options?: RawAxiosRequestConfig) {
        return PeopleApiFp(this.configuration).peopleControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a specific Star Wars character by their ID
     * @summary Get a person by ID
     * @param {number} id The ID of the person
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApi
     */
    public peopleControllerFindOne(id: number, options?: RawAxiosRequestConfig) {
        return PeopleApiFp(this.configuration).peopleControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PlanetsApi - axios parameter creator
 * @export
 */
export const PlanetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a list of all Star Wars planets
         * @summary Get all planets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planetsControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/planets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a specific Star Wars planet by its ID
         * @summary Get a planet by ID
         * @param {number} id The ID of the planet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planetsControllerFindOne: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('planetsControllerFindOne', 'id', id)
            const localVarPath = `/planets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlanetsApi - functional programming interface
 * @export
 */
export const PlanetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlanetsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a list of all Star Wars planets
         * @summary Get all planets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planetsControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Planet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.planetsControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanetsApi.planetsControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a specific Star Wars planet by its ID
         * @summary Get a planet by ID
         * @param {number} id The ID of the planet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planetsControllerFindOne(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Planet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.planetsControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanetsApi.planetsControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PlanetsApi - factory interface
 * @export
 */
export const PlanetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlanetsApiFp(configuration)
    return {
        /**
         * Retrieve a list of all Star Wars planets
         * @summary Get all planets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planetsControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<Planet>> {
            return localVarFp.planetsControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a specific Star Wars planet by its ID
         * @summary Get a planet by ID
         * @param {number} id The ID of the planet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planetsControllerFindOne(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Planet> {
            return localVarFp.planetsControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlanetsApi - object-oriented interface
 * @export
 * @class PlanetsApi
 * @extends {BaseAPI}
 */
export class PlanetsApi extends BaseAPI {
    /**
     * Retrieve a list of all Star Wars planets
     * @summary Get all planets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanetsApi
     */
    public planetsControllerFindAll(options?: RawAxiosRequestConfig) {
        return PlanetsApiFp(this.configuration).planetsControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a specific Star Wars planet by its ID
     * @summary Get a planet by ID
     * @param {number} id The ID of the planet
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanetsApi
     */
    public planetsControllerFindOne(id: number, options?: RawAxiosRequestConfig) {
        return PlanetsApiFp(this.configuration).planetsControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SpeciesApi - axios parameter creator
 * @export
 */
export const SpeciesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a list of all Star Wars species
         * @summary Get all species
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        speciesControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/species`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a specific Star Wars species by its ID
         * @summary Get a species by ID
         * @param {number} id The ID of the species
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        speciesControllerFindOne: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('speciesControllerFindOne', 'id', id)
            const localVarPath = `/species/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SpeciesApi - functional programming interface
 * @export
 */
export const SpeciesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SpeciesApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a list of all Star Wars species
         * @summary Get all species
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async speciesControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Species>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.speciesControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpeciesApi.speciesControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a specific Star Wars species by its ID
         * @summary Get a species by ID
         * @param {number} id The ID of the species
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async speciesControllerFindOne(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Species>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.speciesControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpeciesApi.speciesControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SpeciesApi - factory interface
 * @export
 */
export const SpeciesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SpeciesApiFp(configuration)
    return {
        /**
         * Retrieve a list of all Star Wars species
         * @summary Get all species
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        speciesControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<Species>> {
            return localVarFp.speciesControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a specific Star Wars species by its ID
         * @summary Get a species by ID
         * @param {number} id The ID of the species
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        speciesControllerFindOne(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Species> {
            return localVarFp.speciesControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SpeciesApi - object-oriented interface
 * @export
 * @class SpeciesApi
 * @extends {BaseAPI}
 */
export class SpeciesApi extends BaseAPI {
    /**
     * Retrieve a list of all Star Wars species
     * @summary Get all species
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpeciesApi
     */
    public speciesControllerFindAll(options?: RawAxiosRequestConfig) {
        return SpeciesApiFp(this.configuration).speciesControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a specific Star Wars species by its ID
     * @summary Get a species by ID
     * @param {number} id The ID of the species
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpeciesApi
     */
    public speciesControllerFindOne(id: number, options?: RawAxiosRequestConfig) {
        return SpeciesApiFp(this.configuration).speciesControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StarshipsApi - axios parameter creator
 * @export
 */
export const StarshipsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a list of all Star Wars starships
         * @summary Get all starships
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        starshipsControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/starships`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a specific Star Wars starship by its ID
         * @summary Get a starship by ID
         * @param {number} id The ID of the starship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        starshipsControllerFindOne: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('starshipsControllerFindOne', 'id', id)
            const localVarPath = `/starships/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StarshipsApi - functional programming interface
 * @export
 */
export const StarshipsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StarshipsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a list of all Star Wars starships
         * @summary Get all starships
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async starshipsControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Starship>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.starshipsControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StarshipsApi.starshipsControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a specific Star Wars starship by its ID
         * @summary Get a starship by ID
         * @param {number} id The ID of the starship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async starshipsControllerFindOne(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Starship>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.starshipsControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StarshipsApi.starshipsControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StarshipsApi - factory interface
 * @export
 */
export const StarshipsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StarshipsApiFp(configuration)
    return {
        /**
         * Retrieve a list of all Star Wars starships
         * @summary Get all starships
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        starshipsControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<Starship>> {
            return localVarFp.starshipsControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a specific Star Wars starship by its ID
         * @summary Get a starship by ID
         * @param {number} id The ID of the starship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        starshipsControllerFindOne(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Starship> {
            return localVarFp.starshipsControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StarshipsApi - object-oriented interface
 * @export
 * @class StarshipsApi
 * @extends {BaseAPI}
 */
export class StarshipsApi extends BaseAPI {
    /**
     * Retrieve a list of all Star Wars starships
     * @summary Get all starships
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarshipsApi
     */
    public starshipsControllerFindAll(options?: RawAxiosRequestConfig) {
        return StarshipsApiFp(this.configuration).starshipsControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a specific Star Wars starship by its ID
     * @summary Get a starship by ID
     * @param {number} id The ID of the starship
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarshipsApi
     */
    public starshipsControllerFindOne(id: number, options?: RawAxiosRequestConfig) {
        return StarshipsApiFp(this.configuration).starshipsControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VehiclesApi - axios parameter creator
 * @export
 */
export const VehiclesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a list of all Star Wars vehicles
         * @summary Get all vehicles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehiclesControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vehicles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a specific Star Wars vehicle by its ID
         * @summary Get a vehicle by ID
         * @param {number} id The ID of the vehicle
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehiclesControllerFindOne: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('vehiclesControllerFindOne', 'id', id)
            const localVarPath = `/vehicles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VehiclesApi - functional programming interface
 * @export
 */
export const VehiclesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VehiclesApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a list of all Star Wars vehicles
         * @summary Get all vehicles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vehiclesControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Vehicle>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vehiclesControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VehiclesApi.vehiclesControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a specific Star Wars vehicle by its ID
         * @summary Get a vehicle by ID
         * @param {number} id The ID of the vehicle
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vehiclesControllerFindOne(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Vehicle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vehiclesControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VehiclesApi.vehiclesControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VehiclesApi - factory interface
 * @export
 */
export const VehiclesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VehiclesApiFp(configuration)
    return {
        /**
         * Retrieve a list of all Star Wars vehicles
         * @summary Get all vehicles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehiclesControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<Vehicle>> {
            return localVarFp.vehiclesControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a specific Star Wars vehicle by its ID
         * @summary Get a vehicle by ID
         * @param {number} id The ID of the vehicle
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehiclesControllerFindOne(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Vehicle> {
            return localVarFp.vehiclesControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VehiclesApi - object-oriented interface
 * @export
 * @class VehiclesApi
 * @extends {BaseAPI}
 */
export class VehiclesApi extends BaseAPI {
    /**
     * Retrieve a list of all Star Wars vehicles
     * @summary Get all vehicles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehiclesApi
     */
    public vehiclesControllerFindAll(options?: RawAxiosRequestConfig) {
        return VehiclesApiFp(this.configuration).vehiclesControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a specific Star Wars vehicle by its ID
     * @summary Get a vehicle by ID
     * @param {number} id The ID of the vehicle
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehiclesApi
     */
    public vehiclesControllerFindOne(id: number, options?: RawAxiosRequestConfig) {
        return VehiclesApiFp(this.configuration).vehiclesControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
}



